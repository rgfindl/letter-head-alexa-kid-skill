AWSTemplateFormatVersion: '2010-09-09'

#
# CloudFormation input parameters
#
#Parameters:
#  VpcStackName:
#    Type: String
#    Description: The vpc stack name, used to import output values from this stack.  cross-stack resource sharing.

#
# CloudFormation resources
#
Resources:

  #
  # Role that our Lambda will assume to provide access to other AWS resources
  #
  IamRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  #
  # Create a Policy and attach it to our Lambda Role.
  #
  IamPolicyLambdaExecution:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IamPolicyLambdaExecution
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: '*'
      Roles:
      - Ref: IamRoleLambdaExecution

  #
  # Our Lambda function.
  #
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Timeout: 5
      Role:
        Fn::GetAtt:
          - IamRoleLambdaExecution
          - Arn
      Code:
        ZipFile: !Sub |
          'use strict';

          exports.handler = function(event, context) {
              console.log(JSON.stringify(event));
              context.succeed('Hello CIM!');
          };
      Runtime: nodejs6.10

  #
  # Alexa permission to invoke Lambda
  #
  PermissionForAlexaToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'alexa-appkit.amazon.com'

  #
  # Audio Assets
  #
  PublicAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: '404.html'

#
# Outputs to be used by other CloudFormation templates if needed.
#
Outputs:
  LambdaFunction:
    Description: Lambda Function
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'
  PublicAssetsBucket:
    Description: Where the publicly available assets go.  Audio files, images, etc...
    Value: !Ref PublicAssetsBucket
    Export:
      Name: !Sub '${AWS::StackName}-PublicAssetsBucket'
  PublicAssetsUrl:
    Description: Where the publicly available assets go.  Audio files, images, etc...
    Value: !GetAtt PublicAssetsBucket.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-PublicAssetsUrl'
